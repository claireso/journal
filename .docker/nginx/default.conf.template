# Define a cache path for static files
proxy_cache_path /var/cache/nginx/static_cache levels=1:2 keys_zone=static_cache:10m inactive=7d max_size=1g use_temp_path=on;

upstream nextjs_upstream {
    server nextjs:3000;
}

server {
    # Redirect HTTP requests to HTTPS.
    listen 80 http2;
    server_name ${SERVER_NAME};
    root /usr/share/nginx/html;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;

    server_name ${SERVER_NAME};
    root /usr/share/nginx/html;
    server_tokens off;

    ssl_certificate /etc/nginx/ssl/${SERVER_NAME}.pem;
    ssl_certificate_key /etc/nginx/ssl/${SERVER_NAME}-key.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384";

    gzip on;
    gzip_comp_level 4;
    gzip_types text/plain text/css application/json application/javascript image/svg+xml text/xml application/xml application/xml+rss;
    gzip_proxied any;
    gzip_vary on;
    gzip_static on;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;

    location /uploads {
        try_files $uri =404;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

    location /_next/static {
        proxy_pass http://nextjs_upstream;

        proxy_cache static_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_valid 404 1m;

        # For testing cache - remove before deploying to production
        # add_header X-Proxy-Cache $upstream_cache_status;
    }

    location / {
        proxy_pass http://nextjs_upstream;
        proxy_cookie_path / "/; HTTPOnly; Secure";
    }
}
