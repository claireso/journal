name: QA

on: [push]

jobs:
  install:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install
        run: npm ci

  test:
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Test
        run: npm t

  lint:
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Lint
        run: npm run lint

  tsc:
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Type checking
        run: npx tsc --noEmit

  build:
    runs-on: ubuntu-22.04
    needs: install
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build
        run: npm run build

  # deploy:
  #   runs-on: ubuntu-22.04
  #   environment: production
  #   steps:
  #     - name: Configure SSH
  #       run: |
  #         mkdir -p ~/.ssh/
  #         echo "$DROPLET_SSH_KEY" > ~/.ssh/ghactions
  #         chmod 600 ~/.ssh/ghactions
  #       env:
  #         DROPLET_SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
  #     - name: Deploy
  #       env:
  #         DROPLET_USER: ${{ secrets.DROPLET_USER }}
  #         DROPLET_IP: ${{ secrets.DROPLET_IP }}
  #       run: |
  #         echo "Start to deploy"
  #         ssh -o StrictHostKeyChecking=no -i ~/.ssh/ghactions $DROPLET_USER@$DROPLET_IP "cd ~/journal; sh .circleci/deploy.sh;"
